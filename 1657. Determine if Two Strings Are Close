class Solution {
    unordered_map<char, int> m1, m2;
    //map<int, char> f1, f2;
public:
    bool opt1(string const& word1, string const& word2) {
        for(int i = 0; i < word1.length(); i++) {
            m1[word1[i]]++;
            m2[word2[i]]++;
        }
        for(int i = 0; i < word1.length(); i++) {
            if(m1[word1[i]] != m2[word1[i]])
                return false;
        }
        return true;
    }
    bool opt2(string const& word1, string const& word2) {
        set<char> s1, s2;
        for(int i = 0; i < word1.length(); i++) {
            s1.insert(word1[i]);
            s2.insert(word2[i]);
        }
        if(s1 != s2)
            return false;
        
        vector<int> v1, v2;
        for(auto &x : m1) {
            v1.push_back(x.second);
        }
        for(auto &x : m2) {
            v2.push_back(x.second);
        }
        sort(v1.begin(), v1.end());
        sort(v2.begin(), v2.end());
        if(v1 == v2)
            return true;
        return false;
    }
    bool closeStrings(string word1, string word2) {
        if(word1.length() != word2.length())
            return false;
        
        
        return opt1(word1, word2) || opt2(word1, word2);
    }
};
