class Solution {
public:
    int uniquePaths(int m, int n) {
        int dp[m][n];
        
        for(int i = 0; i < m; i++)
            dp[i][0] = 1;
        for(int j = 0; j < n; j++)
            dp[0][j] = 1;
        
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++)
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]; 
        }
        
        return dp[m - 1][n - 1];
    }
};

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n));
        dp[0][0] = 1;
        
        for(int i = 1; i < m; i++) dp[i][0] = 1;
        for(int j = 1; j < n; j++) dp[0][j] = 1;
        
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        
        return dp[m - 1][n - 1];
    }
};

class Solution:
    """
    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
    """
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0] * n for _ in range(m)]
        dp[0][0] = 1
        
        for i in range(m):
            for j in range(n):
                if(i == 0 and j == 0): continue
                
                a = dp[i - 1][j] if i - 1 >= 0 else 0
                b = dp[i][j - 1] if j - 1 >= 0 else 0
                
                dp[i][j] = a + b
        
        return dp[m - 1][n - 1]
