#python solution
class Solution:
    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:
        wordset = set(wordlist)
        cap = defaultdict(str)
        vow = defaultdict(str)
        
        for word in wordlist:
            if word.upper() not in cap:
                cap[word.upper()] = word
            
            encode = ''.join(['.' if x.lower() in "aeiou" else x.upper() for x in word])
            if encode not in vow:
                vow[encode] = word
                
        
        ans = []
        for i in queries:
            t = ""
            if(i in wordset):
                t = i
            elif(i.upper() in cap):
                t = cap[i.upper()]
            else:
                encode = ''.join(['.' if x.lower() in "aeiou" else x.upper() for x in i])
                if encode in vow:
                    t = vow[encode]
            
            ans.append(t)
        
        return ans
//c++ solution
class Solution {
public:
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {
        unordered_map<string, string> cap, vow;
        unordered_set<string> wordset(wordlist.begin(), wordlist.end());
        string vowels = "aeiou";
        
        auto vowmask = [&](string &w) {
            for(char &c : w) {
                if(vowels.find(tolower(c)) != string::npos)
                    c = '.';
                else
                    c = toupper(c);
            };
            return w;
        };
        
        for(string &x : wordlist) {
            string w = x;
            transform(w.begin(), w.end(), w.begin(), ::toupper);
            if(cap.find(w) == cap.end())
                cap[w] = x;
            
            w = x;
            w = vowmask(w);
            if(vow.find(w) == vow.end())
                vow[w] = x;
        }
        
        vector<string> ans(queries.size());
        
        for(int i = 0; i < queries.size(); i++) {
            string cur = queries[i], t = queries[i];
            
            if(wordset.find(cur) != wordset.end()) {
                ans[i] = cur;
                continue;
            }
            
            transform(t.begin(), t.end(), t.begin(), ::toupper);
            if(cap.find(t) != cap.end())
                ans[i] = cap[t];
            
            else {
                string k = vowmask(cur);
                if(vow.find(k) != vow.end())
                    ans[i] = vow[k];
            }   
        }
        
        return ans;
    }
};
        
