class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        vector<int> freq(n);
        
        for(int x : nums) {
            freq[x - 1]++;
            if(freq[x - 1] > 1)
                return x;
        }
        
        return -1;
    }
}; 

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_set<int> st;
        
        for(int x : nums) {
            if(st.find(x) != st.end())
                return x;
            st.insert(x);
        }
        
        return -1;
    }
}; 

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        fast, slow = nums[0], nums[0]
        
        slow = nums[slow]
        fast = nums[nums[fast]]
        
        #finding intersection of two pointers
        while(fast != slow):
            slow = nums[slow]
            fast = nums[nums[fast]]
        
        #finding entrance to the cycle
        slow = nums[0]
        while(slow != fast):
            slow = nums[slow]
            fast = nums[fast]
        
        return slow
