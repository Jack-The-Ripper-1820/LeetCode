class Solution {
    vector<vector<int>> ans;
    int n;
    vector<bool> vis;

    void dfs(vector<vector<int>> &g, vector<int> &tmp, int cur) {
        tmp.push_back(cur);
        vis[cur] = true;

        if(cur == n - 1) {
            ans.push_back(tmp);
        }

        for(int neigh : g[cur]) {
            if(not vis[neigh])
                dfs(g, tmp, neigh);
        }

        vis[cur] = false;
        tmp.pop_back();
    }
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        n = graph.size();
        vis.assign(n, false);
        vector<int> tmp;

        dfs(graph, tmp, 0);

        return ans;
    }
};

class Solution {
    vector<vector<int>> ans;
    vector<bool> vis;
    vector<int> path;
    int n;
    
    void dfs(vector<vector<int>> &graph, int cur) {
        vis[cur] = true;
        path.push_back(cur);
        
        if(cur == n - 1)
            ans.push_back(path);
        
        for(int &neigh : graph[cur]) {
            if(not vis[neigh])
                dfs(graph, neigh);
        }
        
        vis[cur] = false;
        path.pop_back();
    }
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        n = graph.size();
        vis.resize(n, false);
        
        dfs(graph, 0);
        
        return ans;
    }
};

class Solution {
    private List<List<Integer>> ans;
    private boolean vis[];
    private int n;
    
    private void dfs(int cur, int[][] g, List<Integer> path) {
        vis[cur] = true;
        path.add(cur);
        
        for(int x : g[cur]) {
            if(!vis[x]) {
                if(x == n - 1) {
                    path.add(x);
                    ans.add(new ArrayList<>(path));
                    path.remove(path.size() - 1);
                }
                
                else
                    dfs(x, g, path);
            }
        }
        
        vis[cur] = false;
        path.remove(path.size() - 1);
    }
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        n = graph.length;
        vis = new boolean[n];
        List<Integer> path = new ArrayList<>();
        ans = new ArrayList<>();
        dfs(0, graph, path);
        return ans;
    }
}
