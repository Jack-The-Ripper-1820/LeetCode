/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string tree2str(TreeNode* st) {
        if(not st)
            return "";
        
        if(not st->left and not st->right)
            return to_string(st->val);
        
        if(not st->right)
            return to_string(st->val) + "(" + tree2str(st->left) + ")";
        
        return to_string(st->val) + "(" + tree2str(st->left) + ")" + "(" + tree2str(st->right) + ")";
    }
};

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public String tree2str(TreeNode t) {
        if(t == null)
            return "";
        
        if(t.left == null && t.right == null)
            return String.valueOf(t.val);
        
        if(t.right == null)
            return String.valueOf(t.val) + "(" + tree2str(t.left) + ")";
        
        return String.valueOf(t.val) + "(" + tree2str(t.left) + ")(" + tree2str(t.right) + ")";
        }
}
