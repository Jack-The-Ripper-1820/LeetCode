class Solution {
public:
    bool isAlienSorted(vector<string>& words, string order) {
        int val[26] = {0};
        for(int i = 0; i < order.length(); i++) val[order[i] - 'a'] = i;

        for(int i = 1; i < words.size(); i++) {
            string cur = words[i], prev = words[i - 1];
            int cnt = 0;

            for(int ci = 0, pi = 0; ci < cur.length() and pi < prev.length(); ci++, pi++) {
                if(cur[ci] == prev[pi]) {
                    cnt++;
                    continue;
                }
                if(val[cur[ci] - 'a'] > val[prev[pi] - 'a']) break;
                return false;
            }

            if(cur.length() < prev.length() and cnt == (int)cur.length()) return false;
        }

        return true;
    }
};

class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        mp = {order[i] : i for i in range(len(order))}
        
        def helper(first, second):
            maxl = len(max(first, second, key = len))
            
            for i in range(maxl):
                a = mp[first[i]] if i < len(first) else -2
                b = mp[second[i]] if i < len(second) else -1
                
                if a < b:
                    return True
                elif a > b:
                    return False
            
            return True if len(first) <= len(second) else False
        
        for i in range(1, len(words)):
            if not helper(words[i - 1], words[i]):
                return False
        return True
