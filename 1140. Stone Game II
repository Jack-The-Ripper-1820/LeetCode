class Solution {
    vector<unordered_map<int, int>> dp;
    
    int helper(vector<int> const& arr, int start, int m) {
        if(start >= arr.size())
            return 0;
        
        if(arr.size() - start <= 2*m)
            return accumulate(arr.begin() + start, arr.end(), 0);
        
        if(dp[start].find(m) != dp[start].end())
            return dp[start][m];
        
        int ans = 0, total = accumulate(arr.begin() + start, arr.end(), 0);
        
        for(int i = 1; i <= 2 * m; i++) {
            int op_ans = helper(arr, start + i, max(i, m));
            ans = max(ans, total - op_ans);
        }
        
        return dp[start][m] = ans;
    }
public:
    int stoneGameII(vector<int>& piles) {
        dp = vector<unordered_map<int, int>>(piles.size());
        return helper(piles, 0, 1);
    }
};
