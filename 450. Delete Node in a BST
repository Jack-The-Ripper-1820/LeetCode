/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* helper(TreeNode* root) {
        while(root->left)
            root = root->left;
        
        return root;
    }
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(not root) return nullptr;
        
        if(key < root->val)
            root->left = deleteNode(root->left, key);
        
        else if(key > root->val)
            root->right = deleteNode(root->right, key);
        
        else {
            if(not root->left) return root->right;
            if(not root->right) return root->left;
        
            TreeNode* minNode = helper(root->right);
            root->val = minNode->val;
            root->right = deleteNode(root->right, root->val);
        }
        
        return root;
    }
};


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null)
            return root;
        
        if(root.val == key) {
            if(root.left != null && root.right != null) {
                TreeNode l = root.left;
                root = root.right;

                TreeNode cur = root;

                while(cur != null && cur.left != null)
                    cur = cur.left;

                if(cur != null) cur.left = l;
            }
            
            else if(root.left == null || root.right == null) {
                if(root.left != null)
                    root = root.left;
                else
                    root = root.right;
            }
            
            return root;
        }
        
        if(key < root.val)
            root.left = deleteNode(root.left, key);
        
        else
            root.right = deleteNode(root.right, key);
        
        return root;
    }
}
