class Solution {
    vector<vector<vector<int>>> dp;
    
    bool helper(string const& s1, string const& s2, string const& s3, int i1, int i2, int i3) {
        if(i1 == s1.length() and i2 == s2.length() and i3 == s3.length())
            return true;
        
        if(i1 == s1.length())
            return s2.substr(i2) == s3.substr(i3);
        
        if(i2 == s2.length())
            return s1.substr(i1) == s3.substr(i3);
        
        if(i3 == s3.length()) return false;
        
        if(dp[i1][i2][i3] != -1)
            return dp[i1][i2][i3];
        
        bool ans = false;
        
        if(s1[i1] == s3[i3]) ans = ans or helper(s1, s2, s3, i1 + 1, i2, i3 + 1);
        
        if(s2[i2] == s3[i3]) ans = ans or helper(s1, s2, s3, i1, i2 + 1, i3 + 1);
        
        return dp[i1][i2][i3] = ans;
    }
public:
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.length() + s2.length() != s3.length())
            return false;
        
        dp.resize(s1.length(), vector<vector<int>>(s2.length(), vector<int>(s3.length(), -1)));
        return helper(s1, s2, s3, 0, 0, 0);
    }
};
