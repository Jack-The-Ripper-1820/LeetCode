//merge sort
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode *temp1 = l1, *temp2 = l2;
        ListNode *ans = new ListNode();
        ListNode *res = ans;
        while(temp1 != NULL && temp2 != NULL) {
            if(temp1->val < temp2->val) {
                res->next = temp1;
                temp1 = temp1->next;
            }
            else {
                res->next = temp2;
                temp2 = temp2->next;
            }
            res = res->next;
        }
        while(temp1 != NULL) {
            res->next = temp1;
            res = res->next;
            temp1 = temp1->next;
        }
        while(temp2 != NULL) {
            res->next = temp2;
            res = res->next;
            temp2 = temp2->next;
        }
        return ans->next;
    }
public:
    ListNode* sortList(ListNode* head) {
        if(not head or not head->next)
            return head;
        
        ListNode *slow = head, *fast = head, *prev;
        while(fast and fast->next)
            prev = slow, slow = slow->next, fast = fast->next->next;
        
        prev->next = nullptr;
        
        ListNode* left = sortList(head);
        ListNode* right = sortList(slow);
        
        return merge(left, right);
    }
};

//extra memory
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(not head)
            return nullptr;
        
        ListNode* tmp = head;
        vector<int> ans;
        
        while(tmp) {
            ans.push_back(tmp->val);
            tmp = tmp->next;
        }
        
        sort(ans.begin(), ans.end());
        
        int i = 0;
        for(tmp = head; tmp; tmp = tmp->next)
            tmp->val = ans[i++];
        
        return head;
    }
};
