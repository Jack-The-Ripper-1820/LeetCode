//topological sort
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> ans = new ArrayList<>();
        ans.add(0);
        
        if(edges.length == 0)
            return ans;
        
        Map<Integer, List<Integer>> g = new HashMap<>();
        int[] deg = new int[n];
        
        for(int[] x : edges) {
            g.computeIfAbsent(x[0], o -> new ArrayList<>()).add(x[1]);
            g.computeIfAbsent(x[1], o -> new ArrayList<>()).add(x[0]);
            deg[x[0]]++; deg[x[1]]++;
        }
        
        
        Queue<Integer> q = new LinkedList<>();
        boolean vis[] = new boolean[n];
        
        for(int i = 0; i < n; i++) {
            if(deg[i] == 1) {
                q.add(i);
                vis[i] = true;
            }
            
            ans.add(i);
        }
        
        while(!q.isEmpty()) {
            
            int s = q.size();
            ans.clear();
            
            while(s != 0) {
                int cur = q.poll();
                ans.add(cur);
                
                for(int neigh : g.get(cur)) {
                    if(vis[neigh]) continue;
                    deg[neigh]--;
                    
                    if(deg[neigh] == 1) {
                        q.offer(neigh);
                        vis[neigh] = true;
                    }
                }
                
                s--;
            }
        }
        
        return ans;
    }
}

//topological sort
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        vector<int> deg(n);
        unordered_map<int, vector<int>> g;
        for(auto &edge : edges) {
            g[edge[0]].push_back(edge[1]);
            g[edge[1]].push_back(edge[0]);
            deg[edge[0]] += 1;
            deg[edge[1]] += 1;
        }
        
        vector<int> lvl;
        queue<int> q;
        vector<bool> vis(n);
        for(int i = 0; i < n; i++) { //pushing all leaves into queue
            if(deg[i] == 1) {
                q.push(i);
                vis[i] = true;
            }
            lvl.push_back(i);
        }
        
        int ans = 0;
        while(!q.empty()) {
            int s = q.size();
            ans += 1;
            lvl = {};
            while(s--) {
                int cur = q.front();
                q.pop();
                //cout << cur << " ";
                lvl.push_back(cur);
                vis[cur] = true;
                for(int &neigh : g[cur]) {
                    if(vis[neigh]) continue;
                    deg[neigh] -= 1;
                    if(deg[neigh] == 1) {
                        q.push(neigh);
                        vis[neigh] = true;
                    }
                }
            }
            //cout << endl;
        }
        return lvl;
    }
};
