class Solution {
public:
    int numSubmat(vector<vector<int>>& mat) {
        int m = mat.size(), n = mat[0].size();
        
        for(int i = 0; i < m; i++) for(int j = 1; j < n; j++) if(mat[i][j]) mat[i][j] += mat[i][j - 1];
        
        int ans = 0;
        
        for(int i = 0; i < m; i++) {
            for(int j = n - 1; j >= 0; j--) {
                if(not mat[i][j]) continue;
                
                int minl = n + 1;
                
                for(int k = i; k < m; k++)
                    minl = min(minl, mat[k][j]), ans += minl;
            }
        }
        
        return ans;
    }
};

class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        m, n = len(mat), len(mat[0])
        dp = mat
        
        for i in range(m):
            for j in range(n - 2, -1, -1):
                if(mat[i][j]):
                    dp[i][j] += dp[i][j + 1]
        
        ans = 0
        
        for i in range(m):
            for j in range(n):
                if(mat[i][j] == 0): continue
                
                minl = float('inf')
                
                for k in range(i, m):
                    minl = min(minl, dp[k][j])
                    ans += minl
        
        return ans
