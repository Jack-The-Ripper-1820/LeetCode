class Solution {
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        unordered_map<int, int> mp;
        for(int &i : A) {
            for(int &j : B)
                mp[i + j]++;
        }
        
        int ans = 0;
        for(int &i : C) {
            for(int &j : D) {
                if(mp.find(-i - j) != mp.end())
                    ans += mp[-i - j];
            }
        }
        
        return ans;
    }
};

class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        Map<Integer, Integer> mp = new HashMap<>();
        
        for(int i = 0; i < nums1.length; i++) {
            for(int j = 0; j < nums2.length; j++) {
                mp.put(nums1[i] + nums2[j], mp.getOrDefault(nums1[i] + nums2[j], 0) + 1);
            }
        }
        
        int ans = 0;
        
        for(int i = 0; i < nums3.length; i++) {
            for(int j = 0; j < nums4.length; j++) {
                if(mp.containsKey(-nums3[i] - nums4[j]))
                    ans += mp.get(-nums3[i] - nums4[j]);
            }
        }
        
        return ans;
    }
}
