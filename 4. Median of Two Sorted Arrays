class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<double> mergedArr(nums1.size() + nums2.size());
        
        int i = 0, j = 0, n = 0;
        while(i < nums1.size() && j < nums2.size()) {
            if(nums1[i] <= nums2[j])
                mergedArr[n++] = nums1[i++];
            
            else if(nums2[j] <= nums1[i])
                mergedArr[n++] = nums2[j++];
            
        }
        
        while(i < nums1.size())
            mergedArr[n++] = nums1[i++];
        
        while(j < nums2.size())
            mergedArr[n++] = nums2[j++];
        
        for(double &i : mergedArr)
            cout << i << " ";
        
        n = mergedArr.size();
        int mid = n / 2;
        
        return n % 2 == 0 ? (mergedArr[mid] + mergedArr[mid - 1]) / 2 : mergedArr[mid];
    }
};
