class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        long mask = accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
        
        mask &= -mask;
        vector<int> ans = {0, 0};
        
        for(int x : nums) {
            if(x & mask) ans[0] ^= x;
            else ans[1] ^= x;
        }
        
        return ans;
    }
};

class Solution {
    public int[] singleNumber(int[] nums) {
        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();
        int ans[] = new int[2];
        int ind = 0;
        
        for(int x : nums)
            mp.put(x, mp.getOrDefault(x, 0) + 1);
        
        for(Map.Entry<Integer, Integer> item : mp.entrySet()) {
            if(item.getValue() == 1) {
                ans[ind] = item.getKey();
                ind += 1;
            }
        }
        
        return ans;        
    }
}
