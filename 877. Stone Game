class Solution {
    int dp[100][100];
    
    int helper(vector<int> const& piles, int ind, int m) {
        if(ind >= piles.size())
            return 0;
        
        if(dp[ind][m] != -1)
            return dp[ind][m];
        
        int total = accumulate(piles.begin() + ind, piles.end(), 0);
        
        if(piles.size() - ind <= 2*m)
            return dp[ind][m] = total;
        
        int ans = 0;
        
        for(int x = 1; x <= 2*m; x++) {
            int opponent_ans = helper(piles, ind + x, max(m, x));
            ans = max(ans, total - opponent_ans);
        }
        
        return dp[ind][m] = ans;
    }
public:
    int stoneGameII(vector<int>& piles) {
        memset(dp, -1, sizeof(dp));
        return helper(piles, 0, 1);
    }
};
