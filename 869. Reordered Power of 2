class Solution {
    int counter(unordered_map<int, int> &frq, int num) {
        int c = 0;
         while(num) {
            int rem = num % 10;
            num /= 10;
            frq[rem]++;
            c++; 
        }
        
        return c;
    }
public:
    bool reorderedPowerOf2(int n) {
        unordered_map<int, int> frq;
        int len = counter(frq, n);
        
        for(int i = 1; ; i *= 2) {
            unordered_map<int, int> mp;
            int c = counter(mp, i);
            
            if(c > len) return false;
            
            bool f = true;
            
            for(auto &x : frq) {
                if(x.second != mp[x.first]) {
                    f = false;
                    break;
                }
            }
            
            if(f)
                return true;
        }
        
        return false;
    }
};
class Solution:
    def reorderedPowerOf2(self, N: int) -> bool:
        num = str(N)
        n = len(num)
        st = sorted(num)
        #print(st)
        i = 1
        while(1):
            #print(i)
            x = str(i)
            l = len(x)
            if(l == n and sorted(x) == st):
                return True
            elif(l > n):
                break
            i *= 2
        
        return False
            
